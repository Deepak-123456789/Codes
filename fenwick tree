#include <bits/stdc++.h>
using namespace std;

class BIT {
    int n;
    vector<long long> bit;

public:
   
    BIT(int size) {
        n = size;
        bit.assign(n + 1, 0);
    }

    
    void update(int idx, long long val) {
        for (int i = idx; i <= n; i = i + (i & -i)) {
            bit[i] += val;
        }
    }

  
    long long query(int idx) {
        long long sum = 0;
        for (int i = idx; i > 0; i = i - (i & -i)) {
            sum += bit[i];
        }
        return sum;
    }

  
    long long rangeQuery(int l, int r) {
        return query(r) - query(l - 1);
    }
};

int main() {
    int n;
    cout << "Enter size of array: ";
    cin >> n;

    vector<int> arr(n + 1);
    cout << "Enter array elements (1-based indexing):\n";
    for (int i = 1; i <= n; i++) {
        cin >> arr[i];
    }

    BIT fenwick(n);
    for (int i = 1; i <= n; i++) {
        fenwick.update(i, arr[i]);
    }

 
    cout << "\nRange sum queries:\n";
    int q;
    cout << "Enter number of queries: ";
    cin >> q;
    for (int i = 0; i < q; i++) {
        int l, r;
        cin >> l >> r;
        cout << "Sum[" << l << ", " << r << "] = " << fenwick.rangeQuery(l, r) << "\n";
    }


    cout << "\nEnter index and value to add (update): ";
    int idx, val;
    cin >> idx >> val;
    fenwick.update(idx, val);
    cout << "After update, sum[1, " << n << "] = " << fenwick.rangeQuery(1, n) << "\n";

    return 0;
}
